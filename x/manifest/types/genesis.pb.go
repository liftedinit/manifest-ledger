// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: manifest/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the module genesis state
type GenesisState struct {
	// Params defines all the paramaters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_039781d4f82022f2, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Params defines the set of module parameters.
type Params struct {
	StakeHolders []*StakeHolders `protobuf:"bytes,1,rep,name=stake_holders,json=stakeHolders,proto3" json:"stake_holders,omitempty"`
	Inflation    *Inflation      `protobuf:"bytes,2,opt,name=inflation,proto3" json:"inflation,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_039781d4f82022f2, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetStakeHolders() []*StakeHolders {
	if m != nil {
		return m.StakeHolders
	}
	return nil
}

func (m *Params) GetInflation() *Inflation {
	if m != nil {
		return m.Inflation
	}
	return nil
}

// StakeHolders is the list of addresses and their percentage of the inflation
// distribution
type StakeHolders struct {
	// manifest address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// percentage is the micro denom % of tokens this address gets on a
	// distribution. 100% = 100_000_000 total. so 1_000000 = 1%.
	Percentage int32 `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (m *StakeHolders) Reset()         { *m = StakeHolders{} }
func (m *StakeHolders) String() string { return proto.CompactTextString(m) }
func (*StakeHolders) ProtoMessage()    {}
func (*StakeHolders) Descriptor() ([]byte, []int) {
	return fileDescriptor_039781d4f82022f2, []int{2}
}
func (m *StakeHolders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeHolders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeHolders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeHolders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeHolders.Merge(m, src)
}
func (m *StakeHolders) XXX_Size() int {
	return m.Size()
}
func (m *StakeHolders) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeHolders.DiscardUnknown(m)
}

var xxx_messageInfo_StakeHolders proto.InternalMessageInfo

func (m *StakeHolders) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StakeHolders) GetPercentage() int32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

// Inflation is the distribution coins to the stake holders
type Inflation struct {
	// if automatic inflation is enabled for distribution
	AutomaticEnabled bool `protobuf:"varint,1,opt,name=automatic_enabled,json=automaticEnabled,proto3" json:"automatic_enabled,omitempty"`
	// amount of umfx tokens distributed per year
	YearlyAmount uint64 `protobuf:"varint,2,opt,name=yearly_amount,json=yearlyAmount,proto3" json:"yearly_amount,omitempty"`
	// the token to distribute (i.e. 'umfx')
	MintDenom string `protobuf:"bytes,3,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
}

func (m *Inflation) Reset()         { *m = Inflation{} }
func (m *Inflation) String() string { return proto.CompactTextString(m) }
func (*Inflation) ProtoMessage()    {}
func (*Inflation) Descriptor() ([]byte, []int) {
	return fileDescriptor_039781d4f82022f2, []int{3}
}
func (m *Inflation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inflation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inflation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inflation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inflation.Merge(m, src)
}
func (m *Inflation) XXX_Size() int {
	return m.Size()
}
func (m *Inflation) XXX_DiscardUnknown() {
	xxx_messageInfo_Inflation.DiscardUnknown(m)
}

var xxx_messageInfo_Inflation proto.InternalMessageInfo

func (m *Inflation) GetAutomaticEnabled() bool {
	if m != nil {
		return m.AutomaticEnabled
	}
	return false
}

func (m *Inflation) GetYearlyAmount() uint64 {
	if m != nil {
		return m.YearlyAmount
	}
	return 0
}

func (m *Inflation) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "manifest.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "manifest.v1.Params")
	proto.RegisterType((*StakeHolders)(nil), "manifest.v1.StakeHolders")
	proto.RegisterType((*Inflation)(nil), "manifest.v1.Inflation")
}

func init() { proto.RegisterFile("manifest/v1/genesis.proto", fileDescriptor_039781d4f82022f2) }

var fileDescriptor_039781d4f82022f2 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x1c, 0xc5, 0x7d, 0x34, 0x04, 0x7c, 0x71, 0x05, 0x3d, 0x10, 0x72, 0x2b, 0x70, 0x50, 0x58, 0x2a,
	0x10, 0x3e, 0xa5, 0x20, 0x86, 0x0e, 0x48, 0xad, 0x40, 0xc0, 0x82, 0x2a, 0x77, 0x63, 0xb1, 0x2e,
	0xf1, 0x3f, 0xee, 0x09, 0xdf, 0x9d, 0xe5, 0xbb, 0x54, 0x64, 0x65, 0x64, 0x62, 0x64, 0x60, 0xe8,
	0x47, 0xe0, 0x63, 0x74, 0xec, 0xc8, 0x84, 0x50, 0x32, 0xc0, 0xc7, 0x40, 0xbe, 0x8b, 0x8d, 0xb3,
	0x58, 0xbe, 0xdf, 0x7b, 0x7e, 0xff, 0xe7, 0xbf, 0x0e, 0xef, 0x0a, 0x26, 0xf9, 0x0c, 0xb4, 0xa1,
	0xe7, 0x63, 0x9a, 0x83, 0x04, 0xcd, 0x75, 0x5c, 0x56, 0xca, 0x28, 0x32, 0x68, 0xa4, 0xf8, 0x7c,
	0xbc, 0x77, 0x37, 0x57, 0xb9, 0xb2, 0x9c, 0xd6, 0x6f, 0xce, 0xb2, 0xb7, 0xc3, 0x04, 0x97, 0x8a,
	0xda, 0xa7, 0x43, 0xa3, 0x23, 0x1c, 0xbc, 0x71, 0x31, 0xa7, 0x86, 0x19, 0x20, 0x63, 0xdc, 0x2f,
	0x59, 0xc5, 0x84, 0x0e, 0xd1, 0x43, 0xb4, 0x3f, 0x38, 0xb8, 0x13, 0x77, 0x62, 0xe3, 0x13, 0x2b,
	0x1d, 0xf7, 0x2e, 0x7f, 0x0d, 0xbd, 0x64, 0x6d, 0x1c, 0x7d, 0x47, 0xb8, 0xef, 0x04, 0xf2, 0x12,
	0x6f, 0x6b, 0xc3, 0x3e, 0x42, 0x7a, 0xa6, 0x8a, 0x0c, 0xaa, 0x3a, 0x64, 0x6b, 0x7f, 0x70, 0xb0,
	0xbb, 0x11, 0x72, 0x5a, 0x3b, 0xde, 0x3a, 0x43, 0x12, 0xe8, 0xce, 0x89, 0x3c, 0xc7, 0x3e, 0x97,
	0xb3, 0x82, 0x19, 0xae, 0x64, 0x78, 0xcd, 0x16, 0xb8, 0xb7, 0xf1, 0xed, 0xbb, 0x46, 0x4d, 0xfe,
	0x1b, 0x0f, 0xef, 0x7f, 0xbb, 0x18, 0x7a, 0x7f, 0x2f, 0x86, 0xe8, 0xcb, 0x9f, 0x1f, 0x8f, 0x6f,
	0xb5, 0x1b, 0x5a, 0xd7, 0x7b, 0x8f, 0x83, 0xee, 0x44, 0x12, 0xe2, 0x1b, 0x2c, 0xcb, 0x2a, 0xd0,
	0xee, 0x17, 0xfd, 0xa4, 0x39, 0x92, 0x08, 0xe3, 0x12, 0xaa, 0x29, 0x48, 0xc3, 0x72, 0xb0, 0xe3,
	0xaf, 0x27, 0x1d, 0x72, 0xd8, 0xab, 0x67, 0x8c, 0x3e, 0x23, 0xec, 0xb7, 0x35, 0xc8, 0x13, 0xbc,
	0xc3, 0xe6, 0x46, 0x09, 0x66, 0xf8, 0x34, 0x05, 0xc9, 0x26, 0x05, 0x64, 0x36, 0xf7, 0x66, 0x72,
	0xbb, 0x15, 0x5e, 0x3b, 0x4e, 0x1e, 0xe1, 0xed, 0x05, 0xb0, 0xaa, 0x58, 0xa4, 0x4c, 0xa8, 0xb9,
	0x34, 0x76, 0x46, 0x2f, 0x09, 0x1c, 0x3c, 0xb2, 0x8c, 0x3c, 0xc0, 0x58, 0x70, 0x69, 0xd2, 0x0c,
	0xa4, 0x12, 0xe1, 0x96, 0xad, 0xe8, 0xd7, 0xe4, 0x55, 0x0d, 0x5c, 0x89, 0xe3, 0x93, 0xcb, 0x65,
	0x84, 0xae, 0x96, 0x11, 0xfa, 0xbd, 0x8c, 0xd0, 0xd7, 0x55, 0xe4, 0x5d, 0xad, 0x22, 0xef, 0xe7,
	0x2a, 0xf2, 0x3e, 0xbc, 0xc8, 0xb9, 0x39, 0x9b, 0x4f, 0xe2, 0xa9, 0x12, 0xb4, 0xe0, 0x33, 0x03,
	0x19, 0x97, 0xdc, 0xd0, 0x66, 0x2b, 0x4f, 0x0b, 0xc8, 0x72, 0xa8, 0xe8, 0xa7, 0x96, 0x50, 0xb3,
	0x28, 0x41, 0x4f, 0xfa, 0xf6, 0x3e, 0x3c, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x87, 0xc5, 0xce,
	0x4a, 0x62, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StakeHolders) != len(that1.StakeHolders) {
		return false
	}
	for i := range this.StakeHolders {
		if !this.StakeHolders[i].Equal(that1.StakeHolders[i]) {
			return false
		}
	}
	if !this.Inflation.Equal(that1.Inflation) {
		return false
	}
	return true
}
func (this *StakeHolders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StakeHolders)
	if !ok {
		that2, ok := that.(StakeHolders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Percentage != that1.Percentage {
		return false
	}
	return true
}
func (this *Inflation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Inflation)
	if !ok {
		that2, ok := that.(Inflation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AutomaticEnabled != that1.AutomaticEnabled {
		return false
	}
	if this.YearlyAmount != that1.YearlyAmount {
		return false
	}
	if this.MintDenom != that1.MintDenom {
		return false
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inflation != nil {
		{
			size, err := m.Inflation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakeHolders) > 0 {
		for iNdEx := len(m.StakeHolders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeHolders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StakeHolders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeHolders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeHolders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Percentage != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Percentage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Inflation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inflation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inflation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.YearlyAmount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.YearlyAmount))
		i--
		dAtA[i] = 0x10
	}
	if m.AutomaticEnabled {
		i--
		if m.AutomaticEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeHolders) > 0 {
		for _, e := range m.StakeHolders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Inflation != nil {
		l = m.Inflation.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *StakeHolders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Percentage != 0 {
		n += 1 + sovGenesis(uint64(m.Percentage))
	}
	return n
}

func (m *Inflation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutomaticEnabled {
		n += 2
	}
	if m.YearlyAmount != 0 {
		n += 1 + sovGenesis(uint64(m.YearlyAmount))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeHolders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeHolders = append(m.StakeHolders, &StakeHolders{})
			if err := m.StakeHolders[len(m.StakeHolders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inflation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inflation == nil {
				m.Inflation = &Inflation{}
			}
			if err := m.Inflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeHolders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeHolders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeHolders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			m.Percentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percentage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inflation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inflation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inflation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomaticEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YearlyAmount", wireType)
			}
			m.YearlyAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YearlyAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
