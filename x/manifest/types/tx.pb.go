// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: liftedinit/manifest/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgPayout is the Msg/Payout request type.
type MsgPayout struct {
	// authority is the address of the controlling account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// payout_pairs are the pairs of addresses and coins to be paid out.
	PayoutPairs []PayoutPair `protobuf:"bytes,2,rep,name=payout_pairs,json=payoutPairs,proto3" json:"payout_pairs"`
}

func (m *MsgPayout) Reset()         { *m = MsgPayout{} }
func (m *MsgPayout) String() string { return proto.CompactTextString(m) }
func (*MsgPayout) ProtoMessage()    {}
func (*MsgPayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c6d73bffbe53f, []int{0}
}
func (m *MsgPayout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayout.Merge(m, src)
}
func (m *MsgPayout) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayout) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayout.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayout proto.InternalMessageInfo

func (m *MsgPayout) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgPayout) GetPayoutPairs() []PayoutPair {
	if m != nil {
		return m.PayoutPairs
	}
	return nil
}

// PayoutPair is the object that pairs an address with a coin to be paid out.
type PayoutPair struct {
	Address string                                  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Coin    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=coin,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
}

func (m *PayoutPair) Reset()         { *m = PayoutPair{} }
func (m *PayoutPair) String() string { return proto.CompactTextString(m) }
func (*PayoutPair) ProtoMessage()    {}
func (*PayoutPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c6d73bffbe53f, []int{1}
}
func (m *PayoutPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayoutPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayoutPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayoutPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayoutPair.Merge(m, src)
}
func (m *PayoutPair) XXX_Size() int {
	return m.Size()
}
func (m *PayoutPair) XXX_DiscardUnknown() {
	xxx_messageInfo_PayoutPair.DiscardUnknown(m)
}

var xxx_messageInfo_PayoutPair proto.InternalMessageInfo

func (m *PayoutPair) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PayoutPair) GetCoin() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.Coin
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

// MsgPayoutResponse defines the response structure for executing a MsgPayout
// message.
type MsgPayoutResponse struct {
}

func (m *MsgPayoutResponse) Reset()         { *m = MsgPayoutResponse{} }
func (m *MsgPayoutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPayoutResponse) ProtoMessage()    {}
func (*MsgPayoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c6d73bffbe53f, []int{2}
}
func (m *MsgPayoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayoutResponse.Merge(m, src)
}
func (m *MsgPayoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayoutResponse proto.InternalMessageInfo

// MsgPayout is the Msg/BurnHeldBalance request type.
type MsgBurnHeldBalance struct {
	// sender is the address of the tokenholder.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// burn_coins are the coins to be burned by the tokenholder.
	BurnCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=burn_coins,json=burnCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"burn_coins"`
}

func (m *MsgBurnHeldBalance) Reset()         { *m = MsgBurnHeldBalance{} }
func (m *MsgBurnHeldBalance) String() string { return proto.CompactTextString(m) }
func (*MsgBurnHeldBalance) ProtoMessage()    {}
func (*MsgBurnHeldBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c6d73bffbe53f, []int{3}
}
func (m *MsgBurnHeldBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnHeldBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnHeldBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnHeldBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnHeldBalance.Merge(m, src)
}
func (m *MsgBurnHeldBalance) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnHeldBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnHeldBalance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnHeldBalance proto.InternalMessageInfo

func (m *MsgBurnHeldBalance) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgBurnHeldBalance) GetBurnCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.BurnCoins
	}
	return nil
}

// MsgBurnHeldBalanceResponse defines the response structure for executing a
// MsgBurnHeldBalance message.
type MsgBurnHeldBalanceResponse struct {
}

func (m *MsgBurnHeldBalanceResponse) Reset()         { *m = MsgBurnHeldBalanceResponse{} }
func (m *MsgBurnHeldBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnHeldBalanceResponse) ProtoMessage()    {}
func (*MsgBurnHeldBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c6d73bffbe53f, []int{4}
}
func (m *MsgBurnHeldBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnHeldBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnHeldBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnHeldBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnHeldBalanceResponse.Merge(m, src)
}
func (m *MsgBurnHeldBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnHeldBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnHeldBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnHeldBalanceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPayout)(nil), "liftedinit.manifest.v1.MsgPayout")
	proto.RegisterType((*PayoutPair)(nil), "liftedinit.manifest.v1.PayoutPair")
	proto.RegisterType((*MsgPayoutResponse)(nil), "liftedinit.manifest.v1.MsgPayoutResponse")
	proto.RegisterType((*MsgBurnHeldBalance)(nil), "liftedinit.manifest.v1.MsgBurnHeldBalance")
	proto.RegisterType((*MsgBurnHeldBalanceResponse)(nil), "liftedinit.manifest.v1.MsgBurnHeldBalanceResponse")
}

func init() { proto.RegisterFile("liftedinit/manifest/v1/tx.proto", fileDescriptor_b20c6d73bffbe53f) }

var fileDescriptor_b20c6d73bffbe53f = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x3f, 0x8f, 0x12, 0x41,
	0x18, 0xc6, 0x19, 0x4e, 0xcf, 0x30, 0x5c, 0x62, 0x6e, 0xbd, 0x28, 0xac, 0x66, 0xc1, 0x6d, 0x44,
	0x12, 0x76, 0x05, 0x93, 0x4b, 0xa4, 0x73, 0x35, 0xc6, 0x86, 0x84, 0x60, 0x62, 0x61, 0x43, 0x06,
	0x76, 0x6e, 0x6e, 0x22, 0xbb, 0xb3, 0xee, 0xcc, 0x92, 0xa3, 0xbb, 0x58, 0x5e, 0x65, 0x6d, 0x65,
	0x69, 0xac, 0x28, 0x6c, 0xad, 0xbd, 0xf2, 0x62, 0xa3, 0xd5, 0x69, 0xa0, 0xc0, 0xcf, 0x60, 0x65,
	0x66, 0x67, 0x97, 0xbd, 0x20, 0x9e, 0x17, 0x1b, 0x98, 0x79, 0xe7, 0x99, 0xf7, 0xcf, 0xef, 0x19,
	0x80, 0x95, 0x11, 0xdd, 0x13, 0xd8, 0xa5, 0x3e, 0x15, 0xb6, 0x87, 0x7c, 0xba, 0x87, 0xb9, 0xb0,
	0xc7, 0x4d, 0x5b, 0x1c, 0x58, 0x41, 0xc8, 0x04, 0xd3, 0xae, 0x67, 0x02, 0x2b, 0x15, 0x58, 0xe3,
	0xa6, 0x7e, 0x63, 0xc8, 0xb8, 0xc7, 0xb8, 0xed, 0x71, 0x22, 0xf5, 0x1e, 0x27, 0xea, 0x82, 0xbe,
	0x43, 0x18, 0x61, 0xf1, 0xd2, 0x96, 0xab, 0x24, 0x5a, 0x56, 0xf2, 0xbe, 0x3a, 0x50, 0x9b, 0xe4,
	0xc8, 0x48, 0x32, 0x0d, 0x10, 0xc7, 0xf6, 0xb8, 0x39, 0xc0, 0x02, 0x35, 0xed, 0x21, 0xa3, 0x7e,
	0x72, 0xbe, 0x8d, 0x3c, 0xea, 0x33, 0x3b, 0xfe, 0x54, 0x21, 0xf3, 0x33, 0x80, 0x85, 0x0e, 0x27,
	0x5d, 0x34, 0x61, 0x91, 0xd0, 0x76, 0x61, 0x01, 0x45, 0x62, 0x9f, 0x85, 0x54, 0x4c, 0x4a, 0xa0,
	0x0a, 0x6a, 0x05, 0xa7, 0xf4, 0xe5, 0x63, 0x63, 0x27, 0xa9, 0xf2, 0xd0, 0x75, 0x43, 0xcc, 0xf9,
	0x33, 0x11, 0x52, 0x9f, 0xf4, 0x32, 0xa9, 0xd6, 0x85, 0x5b, 0x41, 0x9c, 0xa1, 0x1f, 0x20, 0x1a,
	0xf2, 0x52, 0xbe, 0xba, 0x51, 0x2b, 0xb6, 0x4c, 0x6b, 0xfd, 0xc4, 0x96, 0xaa, 0xd6, 0x45, 0x34,
	0x74, 0x0a, 0xc7, 0xa7, 0x95, 0xdc, 0xfb, 0xc5, 0xb4, 0x0e, 0x7a, 0xc5, 0x60, 0x19, 0xe6, 0xed,
	0x7b, 0x3f, 0xdf, 0x55, 0x72, 0xaf, 0x17, 0xd3, 0x7a, 0x56, 0xe5, 0x68, 0x31, 0xad, 0x97, 0x55,
	0xc6, 0x0c, 0xf0, 0xb2, 0x77, 0xf3, 0x13, 0x80, 0x30, 0x4b, 0xac, 0x95, 0xe0, 0x15, 0xa4, 0xda,
	0x55, 0x83, 0xf4, 0xd2, 0xad, 0xc6, 0xe1, 0x25, 0xc9, 0xa4, 0x94, 0xaf, 0x82, 0x5a, 0xb1, 0x55,
	0xb6, 0x92, 0xe1, 0x24, 0x34, 0x2b, 0x81, 0x66, 0x3d, 0x62, 0xd4, 0x77, 0x1e, 0xcb, 0xde, 0x7e,
	0x9d, 0x56, 0xee, 0x10, 0x2a, 0xf6, 0xa3, 0x81, 0x35, 0x64, 0x5e, 0xc2, 0x3b, 0xf9, 0x6a, 0x70,
	0xf7, 0xa5, 0x2d, 0x26, 0x01, 0xe6, 0xf1, 0x85, 0xb7, 0x8b, 0x69, 0xbd, 0x38, 0xc2, 0x04, 0x0d,
	0x27, 0x7d, 0x59, 0x41, 0x8d, 0x15, 0x17, 0x6b, 0x57, 0x65, 0xf7, 0x37, 0x57, 0xbb, 0x57, 0x13,
	0x37, 0x24, 0x34, 0xf3, 0x1a, 0xdc, 0x5e, 0x0e, 0xd3, 0xc3, 0x3c, 0x60, 0x3e, 0xc7, 0xe6, 0x51,
	0x1e, 0x6a, 0x1d, 0x4e, 0x9c, 0x28, 0xf4, 0x9f, 0xe2, 0x91, 0xeb, 0xa0, 0x11, 0xf2, 0x87, 0xf8,
	0xbf, 0x7d, 0x3a, 0x04, 0x10, 0x0e, 0xa2, 0xd0, 0x8f, 0xdb, 0x4b, 0x6d, 0x3a, 0x87, 0xc0, 0x13,
	0x49, 0xe0, 0xc3, 0xf7, 0x4a, 0xed, 0x82, 0x04, 0xb8, 0x44, 0xb0, 0x75, 0x06, 0x01, 0x57, 0x0c,
	0x0a, 0xb2, 0x68, 0x2c, 0x68, 0x3f, 0x58, 0x6f, 0xac, 0xb9, 0xc6, 0xd8, 0x95, 0xa9, 0xcd, 0x5b,
	0x50, 0xff, 0x33, 0x9a, 0xa2, 0x6a, 0x7d, 0x05, 0x70, 0xa3, 0xc3, 0x89, 0xf6, 0x1c, 0x6e, 0x26,
	0xaf, 0xf9, 0xf6, 0xdf, 0xde, 0xdf, 0x92, 0xb3, 0x7e, 0xf7, 0x9f, 0x92, 0x34, 0xbf, 0xf6, 0x0a,
	0x5e, 0x5d, 0xb5, 0xa1, 0x7e, 0xce, 0xed, 0x15, 0xad, 0xde, 0xba, 0xb8, 0x36, 0x2d, 0xa9, 0x5f,
	0x3e, 0x94, 0xf4, 0x9c, 0xee, 0xf1, 0xcc, 0x00, 0x27, 0x33, 0x03, 0xfc, 0x98, 0x19, 0xe0, 0xcd,
	0xdc, 0xc8, 0x9d, 0xcc, 0x8d, 0xdc, 0xb7, 0xb9, 0x91, 0x7b, 0xb1, 0x7b, 0xc6, 0x97, 0x35, 0x7f,
	0x3f, 0x8d, 0x11, 0x76, 0x09, 0x0e, 0xed, 0x83, 0x0c, 0x6b, 0xec, 0xd5, 0x60, 0x33, 0xfe, 0xf1,
	0xdf, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x95, 0x81, 0xef, 0xb7, 0xb4, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Payout allows the authority to manually pay out stakeholders.
	Payout(ctx context.Context, in *MsgPayout, opts ...grpc.CallOption) (*MsgPayoutResponse, error)
	// BurnHeldBalance allows a tokenholder to burn coins they own.
	BurnHeldBalance(ctx context.Context, in *MsgBurnHeldBalance, opts ...grpc.CallOption) (*MsgBurnHeldBalanceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Payout(ctx context.Context, in *MsgPayout, opts ...grpc.CallOption) (*MsgPayoutResponse, error) {
	out := new(MsgPayoutResponse)
	err := c.cc.Invoke(ctx, "/liftedinit.manifest.v1.Msg/Payout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnHeldBalance(ctx context.Context, in *MsgBurnHeldBalance, opts ...grpc.CallOption) (*MsgBurnHeldBalanceResponse, error) {
	out := new(MsgBurnHeldBalanceResponse)
	err := c.cc.Invoke(ctx, "/liftedinit.manifest.v1.Msg/BurnHeldBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Payout allows the authority to manually pay out stakeholders.
	Payout(context.Context, *MsgPayout) (*MsgPayoutResponse, error)
	// BurnHeldBalance allows a tokenholder to burn coins they own.
	BurnHeldBalance(context.Context, *MsgBurnHeldBalance) (*MsgBurnHeldBalanceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Payout(ctx context.Context, req *MsgPayout) (*MsgPayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payout not implemented")
}
func (*UnimplementedMsgServer) BurnHeldBalance(ctx context.Context, req *MsgBurnHeldBalance) (*MsgBurnHeldBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnHeldBalance not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Payout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Payout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liftedinit.manifest.v1.Msg/Payout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Payout(ctx, req.(*MsgPayout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnHeldBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnHeldBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnHeldBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liftedinit.manifest.v1.Msg/BurnHeldBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnHeldBalance(ctx, req.(*MsgBurnHeldBalance))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "liftedinit.manifest.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Payout",
			Handler:    _Msg_Payout_Handler,
		},
		{
			MethodName: "BurnHeldBalance",
			Handler:    _Msg_BurnHeldBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liftedinit/manifest/v1/tx.proto",
}

func (m *MsgPayout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PayoutPairs) > 0 {
		for iNdEx := len(m.PayoutPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PayoutPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayoutPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayoutPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayoutPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnHeldBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnHeldBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnHeldBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnCoins) > 0 {
		for iNdEx := len(m.BurnCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnHeldBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnHeldBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnHeldBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPayout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PayoutPairs) > 0 {
		for _, e := range m.PayoutPairs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *PayoutPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPayoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnHeldBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BurnCoins) > 0 {
		for _, e := range m.BurnCoins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBurnHeldBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPayout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayoutPairs = append(m.PayoutPairs, PayoutPair{})
			if err := m.PayoutPairs[len(m.PayoutPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayoutPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayoutPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayoutPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnHeldBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnHeldBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnHeldBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnCoins = append(m.BurnCoins, types.Coin{})
			if err := m.BurnCoins[len(m.BurnCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnHeldBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnHeldBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnHeldBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
